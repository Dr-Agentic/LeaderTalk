How to Retain or Add File Extensions (and do it Safely)
While Multer's default is to strip extensions for safety, you can configure it to include them. However, it's crucial to do this safely with proper validation.

Here's how you do it using diskStorage:

JavaScript

const multer = require('multer');
const path = require('path'); // Node.js built-in path module

// Configure disk storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Specify the directory where files will be stored
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    // You can customize the filename here
    // It's recommended to combine a unique identifier with the original extension

    // Option 1: Use a unique ID + original extension (recommended for safety)
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const fileExtension = path.extname(file.originalname); // Get the original extension
    cb(null, file.fieldname + '-' + uniqueSuffix + fileExtension);

    // Option 2: Use originalname directly (less safe, but useful if you trust the client)
    // cb(null, file.originalname); // USE WITH CAUTION!

    // Option 3: Use originalname if you're sure about the source and validate thoroughly
    // cb(null, file.originalname);
  }
});

const upload = multer({
  storage: storage,
  // IMPORTANT: Add a fileFilter for security!
  fileFilter: (req, file, cb) => {
    // Example: Only allow images
    if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {
      cb(null, true); // Accept the file
    } else {
      cb(new Error('Invalid file type. Only JPEG and PNG are allowed.'), false); // Reject the file
    }
  }
});

// Example usage in an Express route
// app.post('/upload', upload.single('myFile'), (req, res) => {
//   if (req.file) {
//     console.log('File uploaded:', req.file);
//     res.send('File uploaded successfully!');
//   } else {
//     res.status(400).send('No file uploaded or invalid file type.');
//   }
// });